# The template can be launched automatically by invoking the below URL:
# https://console.aws.amazon.com/cloudformation/home?region=ap-southeast-2#/stacks/new?stackName=aws-log4jshell-CVE-2021-44228-PoC&templateURL=https://github.com/adamtheapiguy/log4jshellPoC/blob/main/aws-log4jshell-CVE-2021-44228-poc.yaml
AWSTemplateFormatVersion: 2010-09-09
Description: >
    This template deploys 2x VPCs as well as all the resources required for log4jShell PoC.
    This is targeting enterprise and government security use cases.
    
    After you run the template you need to access AWS ACM and add the required DNS CNAME 
    record to Route53.

    Throughout the CF template, Your resources would be deployed in VPC with subnets in 
    Availability Zone A & B. The same thing for the attacker network. 
    having 2 separate VPCs, would gurantee
    that both your infrastrcure and the attacker infrastructure are physically separated.
    
    StackName: aws-log4jshell-CVE-2021-44228-PoC
    V1.0.0

    NOTES:
      1. You need to reach out to myself to give you the S3 Bucket access details.

###############################################################################
#        
# AWS AWS::CloudFormation::Interface is a metadata key that defines how 
#  parameters are grouped and sorted in the AWS CloudFormation console 
#
###############################################################################

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Your Network Infrastructure"
        Parameters:
          - YourEnvironmentName
          - YourVpcCidrA
          - YourVpcCidrB
          - YourPublicSubnetACidr
          - YourPublicSubnetBCidr
          - YourPrivateSubnetACidr
          - YourPrivateSubnetBCidr
          - YourApiCertificateDomainName
          - PreExistingAppApiCertificateArn
      -
        Label:
          default: "Attacker Network Infrastructure"
        Parameters:
          - AttackerEnvironmentName
          - AttackerVpcCidrA
          - AttackerVpcCidrB
          - AttackerPublicSubnetACidr
          - AttackerPublicSubnetBCidr
          - AttackerPrivateSubnetACidr
          - AttackerPrivateSubnetBCidr
          - AttackerMLdapDomainName
          - AttackerMHttpDomainName
          - AttackerBotnetMasterDomainName

      -
        Label:
          default: "Log4jShell Attack Proof of Concept (PoC) files"
        Parameters:
          - log4jShellAttackSFilesS3BucketName
          - log4jShellAttackSFilesUserAccessKeyId
          - log4jShellAttackSFilesUserSecretAccessKey
          - HostedZoneResource
          - EC2InstanceTimezone

Parameters:

    YourEnvironmentName:
        Description: An environment name that will used as a prefix for to resource names
        Type: String
        Default: Your-vpc

    AttackerEnvironmentName:
        Description: An environment name that will used as a prefix for to resource names
        Type: String
        Default: Attacker-vpc
        
    PreExistingAppApiCertificateArn:
      Description: Arn for pre-existing Certificate. Leave empty to have a new Certificate 
        created and managed by this stack. Put existing Certificate ARN if you don't want 
        a new one to be created
      Type: String
      Default: ""

    PreExistingYourElasticIPAllocationId:
      Description: AllocationId for Your EIP. Leave empty to have a new EIP
        created and managed by this stack. Put existing EIP AllocationId if you don't want 
        a new one to be created
      Type: String
      Default: ""

    PreExistingAttackerElasticIPAllocationId:
      Description: AllocationId for Attacker EIP. Leave empty to have a new EIP
        created and managed by this stack. Put existing EIP AllocationId if you don't want 
        a new one to be created
      Type: String
      Default: ""

    log4jShellAttackSFilesS3BucketName:
      Description: This is the S3 bucket name for the log4jShell Attack PoC
      Type: String
      Default: "files.myprototype.io"

    log4jShellAttackSFilesUserAccessKeyId:
      Description: This is the User Access Key Id. You need to contact me to get your key.
      Type: String
      ConstraintDescription: Please provide a valid AccessKeyId 
      Default: ""

    log4jShellAttackSFilesUserSecretAccessKey:
      Description: This is the Secret Access Key. You need to contact me to get your secret.
      Type: String
      Default: ""

    YourAppApiCertificateDomainName:
      Description: This is the domain name for the certificate that would be created for WebApp Api ALB listener rule
      Type: String
      Default: "api.alb.myprototype.io"

    AttackerMLdapDomainName:
      Description: This is the domain name for the attacker LDAP Network Load Balancer
      Type: String
      Default: attacker.mldap.myprototype.io

    AttackerMHttpDomainName:
      Description: This is the domain name for the attacker LDAP Network Load Balancer
      Type: String
      Default: attacker.mhttp.myprototype.io

    AttackerBotnetMasterDomainName:
      Description: This is the domain name for the attacker LDAP Network Load Balancer
      Type: String
      Default: attacker.botnet.master.myprototype.io

    HostedZoneResource:
        Description: The ID of the hosted zone that contains the Route53 resource record sets 
                     where we need to create domain names for your WebApp/Api and attacker ldap
        Type: AWS::Route53::HostedZone::Id

    YourEC2InstanceHostName:
        Description: This is the hostname for the WebApp Api EC2 instance.
        Type: String
        Default: YourAppApiHost

    AttackerEC2InstanceHostName:
        Description: This is the hostname for the Attacker LDAP EC2 instance.
        Type: String
        Default: AttackerHost

    EC2InstanceTimezone:
        Description: This is the hostname for the Attacker LDAP EC2 instance.
        Type: String
        Default: Australia/Sydney

    YourVpcCidrA: 
        Description: This is the IP range (CIDR notation) for Your VPC. This CIDR
                     would be used for creating /27 subnets in AWS Availability Zone A.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
        Default: 10.10.0.0/16

    YourVpcCidrB: 
        Description: This is the IP range (CIDR notation) for Your VPC. This CIDR
                     would be used for creating /27 subnets in AWS Availability Zone A.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
        Default: 10.20.0.0/16
        
    AttackerVpcCidrA: 
        Description: This is the IP range (CIDR notation) for the Attacker VPC. This CIDR
                     would be used for creating /27 subnets in AWS Availability Zone B.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
        Default: 10.30.0.0/16

    AttackerVpcCidrB: 
        Description: This is the IP range (CIDR notation) for the Attacker VPC. This CIDR
                     would be used for creating /27 subnets in AWS Availability Zone B.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
        Default: 10.40.0.0/16

    YourPublicSubnetACidr:
        Description: This is the IP range (CIDR notation) for the Your public subnet in Availability Zone A.
                     This subnet is where your NAT gateway as well as your ALB exist.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        Default: 10.10.0.64/27
  
    YourPublicSubnetBCidr:
        Description: This is the IP range (CIDR notation) for the Your public subnet in Availability Zone A.
                     This subnet is where your NAT gateway as well as your ALB exist.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        Default: 10.20.0.64/27

    YourPrivateSubnetACidr:
        Description: This is the IP range (CIDR notation) for the your private subnet in Availability Zone A.
                     This subnet is where your WebApp Api EC2 instance would exist.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        Default: 10.10.10.0/27

    YourPrivateSubnetBCidr:
        Description: This is the IP range (CIDR notation) for the your private subnet in Availability Zone A.
                     This subnet is where your WebApp Api EC2 instance would exist.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        Default: 10.20.10.0/27

    AttackerPublicSubnetACidr:
        Description: This is the IP range (CIDR notation) for the Attacker public subnet in Availability Zone B.
                     This subnet is where the attacker NAT gateway as well as the attacker NLB would exist.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        Default: 10.30.0.64/27

    AttackerPublicSubnetBCidr:
        Description: This is the IP range (CIDR notation) for the Attacker public subnet in Availability Zone B.
                     This subnet is where the attacker NAT gateway as well as the attacker NLB would exist.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        Default: 10.40.0.64/27

    AttackerPrivateSubnetACidr:
        Description: This is the IP range (CIDR notation) for the Your the attacker private subnet in Availability Zone B.
                     This subnet is where the Attacker LDAP EC2 instance would exist.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        Default: 10.30.10.0/27

    AttackerPrivateSubnetBCidr:
        Description: This is the IP range (CIDR notation) for the Your the attacker private subnet in Availability Zone B.
                     This subnet is where the Attacker LDAP EC2 instance would exist.
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        Default: 10.40.10.0/27


Conditions:
  NeedsNewAppApiCertificate: !Equals [!Ref PreExistingAppApiCertificateArn, ""]
  NeedsNewYourElasticIPAllocationId:        !Equals [!Ref PreExistingYourElasticIPAllocationId, ""]
  NeedsNewAttackerElasticIPAllocationId:        !Equals [!Ref PreExistingAttackerElasticIPAllocationId, ""]

Resources:

###############################################################################
#        
# AWS VPCs and Internet Gateways (for Outbound Internet Access)
#  Yours:
#    1x YourVPC
#    1x YourVpcCidrBBlock
#    1x YourInternetGateway
#    1x YourInternetGatewayAttachment
#
#  Attacker:
#    1x AttackerVPC
#    1x AttackerVpcCidrBBlock
#    1x AttackerInternetGateway
#    1x AttackerInternetGatewayAttachment 
#
###############################################################################

# Yours

    YourVPC: 
        Type: AWS::EC2::VPC
        Properties:
          EnableDnsSupport: true
          EnableDnsHostnames: true
          CidrBlock: !Ref YourVpcCidrA
          Tags: 
            - Key: Name 
              Value: !Ref YourEnvironmentName

    YourVpcCidrBBlock:
      Type: AWS::EC2::VPCCidrBlock
      Properties:
        VpcId: !Ref YourVPC
        CidrBlock: !Ref YourVpcCidrB

    YourInternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
          Tags:
            - Key: Name
              Value: !Join ["-", [!Ref YourEnvironmentName, "YourIGW"]]
              
    YourInternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref YourInternetGateway
            VpcId: !Ref YourVPC

# Attacker

    AttackerVPC: 
        Type: AWS::EC2::VPC
        Properties:
          EnableDnsSupport: true
          EnableDnsHostnames: true
          CidrBlock: !Ref AttackerVpcCidrA
          Tags: 
            - Key: Name 
              Value: !Ref AttackerEnvironmentName

    AttackerVpcCidrBBlock:
      Type: AWS::EC2::VPCCidrBlock
      Properties:
        VpcId: !Ref AttackerVPC
        CidrBlock: !Ref AttackerVpcCidrB

    AttackerInternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
          Tags:
            - Key: Name
              Value: !Join ["-", [!Ref AttackerEnvironmentName, "AttackerIGW"]]
              
    AttackerInternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref AttackerInternetGateway
            VpcId: !Ref AttackerVPC


###############################################################################
#        
# Public Subnets and Routing Tables
# A public subnet is a subnet where the default gateway is the Internet Gateway.
# This means that network components in that subnet can send outbound traffic 
# directly to the internet 
#
#  Yours:
#    1x YourPublicSubnetA
#    1x YourPublicSubnetCustomRouteTable
#    1x YourPublicSubnetCustomRouteTableEntry
#    1x YourPublicRouteTableSubnetAssociation
#    1x YourPublicSubnetB
#    1x YourNATGatewayEIP
#    1x YourNATGateway
#
#  Attacker:
#    1x AttackerPublicSubnetA
#    1x AttackerPublicSubnetCustomRouteTable
#    1x AttackerPublicSubnetCustomRouteTableEntry
#    1x AttackerPublicRouteTableSubnetAssociation
#    1x AttackerPublicSubnetB
#    1x AttackerNATGatewayEIP
#    1x AttackerNATGateway  
#
###############################################################################

# Yours

    YourPublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref YourVPC
          AvailabilityZone: !Select [ 0, !GetAZs ]
          CidrBlock: !Ref YourPublicSubnetACidr
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${YourEnvironmentName}-Your-Public-SubnetA
      DependsOn: YourVPC

    YourPublicSubnetCustomRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: YourVPC
        Tags:
        - Key: Name
          Value: !Sub ${YourEnvironmentName}-YourPublicSubnetCustomRouteTable
        - Key: Application
          Value:
            Ref: AWS::StackId
            
    YourPublicSubnetCustomRouteTableEntry:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: YourPublicSubnetCustomRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: YourInternetGateway
      DependsOn: YourInternetGatewayAttachment
          
    YourPublicRouteTableSubnetAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: YourPublicSubnetA
        RouteTableId:
          Ref: YourPublicSubnetCustomRouteTable

    YourPublicSubnetB: 
      Type: AWS::EC2::Subnet
      DependsOn: YourVpcCidrBBlock
      Properties:
          VpcId: !Ref YourVPC
          AvailabilityZone: !Select [ 1, !GetAZs ]
          CidrBlock: !Ref YourPublicSubnetBCidr
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${YourEnvironmentName}-Your-Public-SubnetB

    YourNATGatewayEIP:
      Type: AWS::EC2::EIP
      Condition: NeedsNewYourElasticIPAllocationId
      Properties: 
        Domain: vpc

    YourNATGateway:
      Type: AWS::EC2::NatGateway
      Properties: 
        AllocationId: !If [NeedsNewYourElasticIPAllocationId, !GetAtt YourNATGatewayEIP.AllocationId, !Ref PreExistingYourElasticIPAllocationId]
        SubnetId: !Ref YourPublicSubnetA
        Tags:
        - Key: Name
          Value: !Sub ${YourEnvironmentName}-YourNATGateway


# Attacker

    AttackerPublicSubnetA: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref AttackerVPC
          AvailabilityZone: !Select [ 0, !GetAZs ]
          CidrBlock: !Ref AttackerPublicSubnetACidr
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${AttackerEnvironmentName}-Attacker-Public-Subnet
      DependsOn: AttackerVPC

    AttackerPublicSubnetCustomRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: AttackerVPC
        Tags:
        - Key: Name
          Value: !Sub ${AttackerEnvironmentName}-AttackerPublicSubnetCustomRouteTable
        - Key: Application
          Value:
            Ref: AWS::StackId
            
    AttackerPublicSubnetCustomRouteTableEntry:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: AttackerPublicSubnetCustomRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: AttackerInternetGateway
      DependsOn: AttackerInternetGatewayAttachment
          
    AttackerPublicRouteTableSubnetAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: AttackerPublicSubnetA
        RouteTableId:
          Ref: AttackerPublicSubnetCustomRouteTable

    AttackerPublicSubnetB: 
      Type: AWS::EC2::Subnet
      DependsOn: AttackerVpcCidrBBlock
      Properties:
          VpcId: !Ref AttackerVPC
          AvailabilityZone: !Select [ 1, !GetAZs ]
          CidrBlock: !Ref AttackerPublicSubnetBCidr
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${AttackerEnvironmentName}-Attacker-Public-SubnetB

    AttackerNATGatewayEIP:
      Type: AWS::EC2::EIP
      Condition: NeedsNewAttackerElasticIPAllocationId
      Properties: 
        Domain: vpc

    AttackerNATGateway:
      Type: AWS::EC2::NatGateway
      Properties: 
        AllocationId: !If [NeedsNewAttackerElasticIPAllocationId, !GetAtt AttackerNATGatewayEIP.AllocationId, !Ref PreExistingAttackerElasticIPAllocationId]
        SubnetId: !Ref AttackerPublicSubnetA
        Tags:
        - Key: Name
          Value: !Sub ${AttackerEnvironmentName}-AttackerNATGateway

###############################################################################
#        
# Private Subnets and Routing Tables
# A private subnet is a subnet where default gateway is the NatGateway.
# This means that network components in that subnet cannot send outbound traffic 
# directly to the internet. Instead it routes to NAT Gateway where the traffic 
# can be NAT'ed
#
#  Yours:
#    1x YourPrivateSubnetA
#    1x YourPrivateSubnetACustomRouteTable
#    1x YourPrivateSubnetACustomRouteTableEntry
#    1x YourPrivateRouteTableSubnetAAssociation
#    1x YourPrivateSubnetB
#
#  Attacker:
#    1x AttackerPrivateSubnetA
#    1x AttackerPrivateSubnetACustomRouteTable
#    1x AttackerPrivateSubnetCustomRouteTableEntry 
#    1x AttackerPrivateRouteTableASubnetAssociation
#    1x AttackerPrivateSubnetB
#
###############################################################################

# Yours

    YourPrivateSubnetA: 
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref YourVPC
        AvailabilityZone: !Select [ 0, !GetAZs ]
        CidrBlock: !Ref YourPrivateSubnetACidr
        MapPublicIpOnLaunch: false
        Tags: 
          - Key: Name 
            Value: YourPrivateSubnetA

    YourPrivateSubnetACustomRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: YourVPC
        Tags:
        - Key: Name
          Value: !Sub ${YourEnvironmentName}-YourPrivateSubnetCustomTable
        - Key: Application
          Value:
            Ref: AWS::StackId
            
    YourPrivateSubnetACustomRouteTableEntry:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: YourPrivateSubnetACustomRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref YourNATGateway

    YourPrivateRouteTableSubnetAAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: YourPrivateSubnetA
        RouteTableId:
          Ref: YourPrivateSubnetACustomRouteTable

    YourPrivateSubnetB: 
      Type: AWS::EC2::Subnet
      DependsOn: YourVpcCidrBBlock
      Properties:
        VpcId: !Ref YourVPC
        AvailabilityZone: !Select [ 1, !GetAZs ]
        CidrBlock: !Ref YourPrivateSubnetBCidr
        MapPublicIpOnLaunch: false
        Tags: 
          - Key: Name 
            Value: YourPrivateSubnetB

# Attacker

    AttackerPrivateSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref AttackerVPC
        AvailabilityZone: !Select [ 0, !GetAZs ]
        CidrBlock: !Ref AttackerPrivateSubnetACidr
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: AttackerPrivateSubnetA
  
    AttackerPrivateSubnetACustomRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: AttackerVPC
        Tags:
        - Key: Name
          Value: !Sub ${AttackerEnvironmentName}-AttackerPrivateSubnetCustomTable
        - Key: Application
          Value:
            Ref: AWS::StackId
            
    AttackerPrivateSubnetCustomRouteTableAEntry:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: AttackerPrivateSubnetACustomRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref AttackerNATGateway

    AttackerPrivateRouteTableASubnetAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: AttackerPrivateSubnetA
        RouteTableId:
          Ref: AttackerPrivateSubnetACustomRouteTable

    AttackerPrivateSubnetB:
      Type: AWS::EC2::Subnet
      DependsOn: AttackerVpcCidrBBlock
      Properties:
        VpcId: !Ref AttackerVPC
        AvailabilityZone: !Select [ 1, !GetAZs ]
        CidrBlock: !Ref AttackerPrivateSubnetBCidr
        MapPublicIpOnLaunch: false
        Tags:
          - Key: Name
            Value: AttackerPrivateSubnetB

###############################################################################
#        
# EC2 Instances, Role, Profile & Security Group.
#
#  Common:
#    1x Log4jShellPoCManagedInstanceRole
#    1x Log4jShellPoCManagedInstanceProfile
#    1x Log4jShellPoCAutomationServiceRole
# 
#  Yours:
#    1x YourEc2Instance
#    1x YourEc2InstanceSecurityGroup
#
#  Attacker:
#    1x AttackerEc2Instance
#    1x AttackerEc2InstanceSecurityGroup
#
###############################################################################

# Yours

    Log4jShellPoCManagedInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ssm.amazonaws.com
              - ec2.amazonaws.com
            Action: sts:AssumeRole
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        Path: "/"
    
    Log4jShellPoCManagedInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
        - !Ref Log4jShellPoCManagedInstanceRole
        InstanceProfileName: Log4jShellPoCManagedInstanceProfile 
    
    Log4jShellPoCAutomationServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ssm.amazonaws.com
              - ec2.amazonaws.com
            Action: sts:AssumeRole
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
        Path: "/"
        RoleName: Log4jShellPoCAutomationServiceRole
        Policies:
        - PolicyName: passrole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - iam:PassRole
              Resource:
              - !GetAtt Log4jShellPoCManagedInstanceRole.Arn
    
    YourEc2Instance:
        Type: AWS::EC2::Instance
        Properties:
          AvailabilityZone: !Select [ 0, !GetAZs ]
          IamInstanceProfile: !Ref Log4jShellPoCManagedInstanceProfile
          ImageId:  ami-0bd2230cfb28832f7
          InstanceType: t2.micro
          SecurityGroupIds:
          - !Ref YourEc2InstanceSecurityGroup
          SubnetId:
            Ref: YourPrivateSubnetA
          UserData:
              # the below commands would be stored in a script on the instance at 
              # /var/lib/cloud/instance/scripts/part-001
              # logs for the script can be found at /var/log/cloud-init-output.log
              # when added to the /var/lib/cloud/instance/scripts/part-001 file
              # cfn-signal used to send signal to CF stack to indicate that all setup on EC2 Instance
              Fn::Base64:
                Fn::Sub: |
                  #!/bin/bash -xev
                  hostnamectl set-hostname ${YourEC2InstanceHostName}-`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone 2>&1`.localdomain
                  timedatectl set-timezone ${EC2InstanceTimezone}
                  /opt/aws/bin/cfn-init -c install,configure -v --stack ${AWS::StackName} --resource YourEc2Instance --region ${AWS::Region}
                  yum update -y
                  /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource YourEc2Instance --region ${AWS::Region}
          Tags:
            - Key: Name
              Value: YourEc2Instance
        Metadata:
          AWS::CloudFormation::Init:
            configSets:
              install:
                - install-packages
                - create-groups
                - create-users
                - install-AppApi
              configure:
                - openLDAP
                - openLDAPData
                - awslogs
                - cfn-hup
              update:
                - cleanup-AppApi
                - update-AppApi
            install-packages:
              packages:
                yum:
                  awslogs: []
                  wireshark: []
                  amazon-ssm-agent: []
                  aws-cfn-bootstrap: []
                  nmap-ncat: []
                  openldap: []
                  openldap-clients: []
                  openldap-servers: []
                  jq: []
            create-groups:
              groups:
                appgroup: {}
                ldap: {}
            create-users:
              users:
                appapi:
                  groups:
                    - "appgroup"
                  homeDir: "/opt/appapi"
                ldap:
                  groups:
                    - "ldap"
                  homeDir: "/opt/ldap"
              files:
                "/opt/appapi/.bashrc":
                  content:
                    Fn::Sub: |
                      export PS1='\u@\h:\w$ '
                  mode: "000500"
                  owner: "appapi"
                  group: "appapi"
                "/opt/appapi/.profile":
                  content:
                    Fn::Sub: |
                      if [ -n "$BASH_VERSION" ]; then
                          # include .bashrc if it exists
                          if [ -f "$HOME/.bashrc" ]; then
                              . "$HOME/.bashrc"
                          fi
                      fi
                  mode: "000500"
                  owner: "appapi"
                  group: "appapi"
                "/opt/ldap/.bashrc":
                  content:
                    Fn::Sub: |
                      export PS1='\u@\h:\w$ '
                  mode: "000500"
                  owner: "ldap"
                  group: "ldap"
                "/opt/ldap/.profile":
                  content:
                    Fn::Sub: |
                      if [ -n "$BASH_VERSION" ]; then
                          # include .bashrc if it exists
                          if [ -f "$HOME/.bashrc" ]; then
                              . "$HOME/.bashrc"
                          fi
                      fi
                  mode: "000500"
                  owner: "ldap"
                  group: "ldap"
              commands:
                appapi-set-shell:
                  command: usermod --shell /bin/bash appapi && chown appapi:appapi /opt/appapi
                ldap-set-shell:
                  command: usermod --shell /bin/bash ldap && chown ldap:ldap /opt/ldap
            install-AppApi:
              files:
                /opt/appapi/appapi.tar.gz:
                  source:
                    Fn::Join:
                      - ""
                      -
                        - "https://s3.ap-southeast-2.amazonaws.com/"
                        - Ref: log4jShellAttackSFilesS3BucketName
                        - "/log4jShellPoC/appapi.tar.gz"
                  mode: "000400"
                  owner: "appapi"
                  group: "appapi"
                  authentication: log4jShellAppApiFilesDownloadCredentials
              commands:
                10-extract-files:
                  command: su - appapi -c "tar xvfz /opt/appapi/appapi.tar.gz"
                20-start-appapi:
                  command: su - appapi -c "nohup java/jre1.8.0_20/bin/java -jar identityApis-0.0.1-SNAPSHOT.jar &> log/appapi.log &"
            openLDAP:
              files:
                /opt/ldap/openLDAPConfig.tar.gz:
                  source:
                    Fn::Join:
                      - ""
                      -
                        - "https://s3.ap-southeast-2.amazonaws.com/"
                        - Ref: log4jShellAttackSFilesS3BucketName
                        - "/log4jShellPoC/openLDAPConfig.tar.gz"
                  mode: "000400"
                  owner: "ldap"
                  group: "ldap"
                  authentication: log4jShellAppApiFilesDownloadCredentials
              commands:
                10-cleanup:
                  command: rm -rf /etc/openldap/*
                20-chown-ldap:
                  command: chown -R ldap:ldap /var/lib/ldap && chown -R ldap:ldap /etc/openldap
                30-extract-files:
                  command: su - ldap -c "tar xvfz /opt/ldap/openLDAPConfig.tar.gz -C /etc/openldap/"
                40-access-log-db:
                  command: mkdir -p /var/lib/ldap-data/accesslog && chown -R ldap:ldap /var/lib/ldap-data
                50-audit-log:
                  command: mkdir /var/log/ldap && chown -R ldap:ldap /var/log/ldap
              services:
                sysvinit:
                  slapd:
                    enabled: true
                    ensureRunning: true
                    files:
                    - "/etc/openldap/ldap.conf"
            openLDAPData:
              files:
                /opt/ldap/openLDAPSetup.tar.gz:
                  source:
                    Fn::Join:
                      - ""
                      -
                        - "https://s3.ap-southeast-2.amazonaws.com/"
                        - Ref: log4jShellAttackSFilesS3BucketName
                        - "/log4jShellPoC/openLDAPSetup.tar.gz"
                  mode: "000400"
                  owner: "ldap"
                  group: "ldap"
                  authentication: log4jShellAppApiFilesDownloadCredentials
              commands:
                10-extract-files:
                  command: su - ldap -c "tar xvfz /opt/ldap/openLDAPSetup.tar.gz"
                20-add-initial-entries:
                  command: su - ldap -c "ldapadd -c -h ldap.`hostname` -p 389 -D 'cn=Manager,dc=casino,dc=com,dc=au' -w opensesame -f setup/00_initial_entries.ldif"
                30-create-objects:
                  command: su - ldap -c "ldapadd -c -h ldap.`hostname` -p 389 -D 'cn=Manager,dc=casino,dc=com,dc=au' -w opensesame -f setup/01_create_objects.ldif"
                40-create-password-policies:
                  command: su - ldap -c "ldapadd -c -h ldap.`hostname` -p 389 -D 'cn=Manager,dc=casino,dc=com,dc=au' -w opensesame -f setup/06_Password_Policies.ldif"
                50-create-customers:
                  command: su - ldap -c "ldapadd -c -h ldap.`hostname` -p 389 -D 'cn=Manager,dc=casino,dc=com,dc=au' -w opensesame -f setup/05_Personas.ldif"
            awslogs:
              files:
                "/etc/awslogs/awslogs.conf":
                  content:
                    Fn::Sub: |
                      [general]
                      state_file = /var/lib/awslogs/agent-state
    
                      [YourAppApiServer]
                      file = /opt/appapi/log/log.out
                      log_stream_name = YourAppApiServer
                      log_group_name = ${YourEc2InstanceLogs}
                "/etc/awslogs/awscli.conf":
                  content:
                    Fn::Sub: |
                      [plugins]
                      cwlogs = cwlogs
                      [default]
                      region = ${AWS::Region}
              services:
                sysvinit:
                  awslogsd:
                    enabled: true
                    ensureRunning: true
                    files:
                    - "/etc/awslogs/awslogs.conf"
                    - "/etc/awslogs/awscli.conf"
            cfn-hup:
              files:
                "/etc/cfn/cfn-hup.conf":
                  mode: '000400'
                  owner: root
                  group: root
                  content:
                    Fn::Sub: |
                      [main]
                      stack=${AWS::StackId}
                      region=${AWS::Region}
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                  content:
                    Fn::Sub: |
                      [cfn-auto-reloader-hook]
                      triggers=post.update
                      path=Resources.YourEc2Instance.Metadata.AWS::CloudFormation::Init
                      action=/opt/aws/bin/cfn-init -c update -v --stack ${AWS::StackName} --resource YourEc2Instance --region ${AWS::Region}
                      runas=root
              services:
                sysvinit:
                  cfn-hup:
                    enabled: true
                    ensureRunning: true
                    files:
                    - "/etc/cfn/cfn-hup.conf"
                    - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
            cleanup-AppApi:
              commands:
                10-stop-AppApi:
                  command: killall -9 -u user appapi
                20-remove-AppApi-files:
                  command: find /opt/appapi -depth -user appapi ! -name '.profile' ! -name '.bashrc' ! -name 'appapi' ! -name '.bash_history' -exec rm -r "{}" \;
            update-AppApi:
              files:
                /opt/appapi/appapi.tar.gz:
                  source:
                    Fn::Join:
                      - ""
                      -
                        - "https://s3.ap-southeast-2.amazonaws.com/"
                        - Ref: log4jShellAttackSFilesS3BucketName
                        - "/log4jShellPoC/appapi.tar.gz"
                  mode: "000400"
                  owner: "appapi"
                  group: "appapi"
                  authentication: log4jShellAppApiFilesDownloadCredentials
              commands:
                10-extract-files:
                  command: su - appapi -c "tar xvfz /opt/appapi/appapi.tar.gz"

          AWS::CloudFormation::Authentication:
            log4jShellAppApiFilesDownloadCredentials: 
              type: S3
              accessKeyId: !Ref log4jShellAttackSFilesUserAccessKeyId
              secretKey: !Ref log4jShellAttackSFilesUserSecretAccessKey
              buckets: !Ref log4jShellAttackSFilesS3BucketName
        CreationPolicy:
          ResourceSignal:
            Timeout: PT5M

    YourEc2InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: YourAppApiInstanceSecurityGroup
        GroupDescription: Enable http/8080 Inbound traffic from Your WebApp Api ALB 
                          to Your WebApp Api EC2 Instance
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            SourceSecurityGroupId: !Ref YourAppApiAlbSecurityGroup
        SecurityGroupEgress:
          # 443 outbound need to be open to allow SSM to connect to the instance.
          # All outbound ports need to be open to mimic a real production environment.
          - IpProtocol: "-1"
            CidrIp: 0.0.0.0/0
        VpcId: !Ref YourVPC

    YourEc2InstanceLogs:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName:
          Fn::Sub: "/log4jShellPoC/YourEc2InstanceLogs/${AWS::StackName}"
        RetentionInDays: 7

# Attacker

    AttackerEc2Instance:
        Type: AWS::EC2::Instance
        Properties:
          AvailabilityZone: !Select [ 0, !GetAZs ]
          IamInstanceProfile: !Ref Log4jShellPoCManagedInstanceProfile
          ImageId:  ami-0bd2230cfb28832f7
          InstanceType: t2.micro
          SecurityGroupIds:
          - !Ref AttackerEc2InstanceSecurityGroup
          SubnetId:
            Ref: AttackerPrivateSubnetA
          UserData:
              # the below commands would be stored in a script on the instance at 
              # /var/lib/cloud/instance/scripts/part-001
              # logs for the script can be found at /var/log/cloud-init-output.log
              # when added to the /var/lib/cloud/instance/scripts/part-001 file
              # We are setting hostname to {Ec2InstanceIPAddress}-{Hostname}-{AWSregion}
              # example: [root@10-30-10-19-attackerhost-ap-southeast-2a ~]
              # cfn-signal used to send signal to CF stack to indicate that all setup on EC2 Instance
              Fn::Base64:
                Fn::Sub: |
                  #!/bin/bash -xev
                  hostnamectl set-hostname ${AttackerEC2InstanceHostName}-`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone 2>&1`.localdomain
                  timedatectl set-timezone ${EC2InstanceTimezone}
                  /opt/aws/bin/cfn-init -c install,configure -v --stack ${AWS::StackName} --resource AttackerEc2Instance --region ${AWS::Region}
                  yum update -y
                  /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AttackerEc2Instance --region ${AWS::Region}
          Tags:
            - Key: Name
              Value: AttackerEc2Instance
        Metadata:
          AWS::CloudFormation::Init:
            configSets:
              install:
                - install-packages
                - create-groups
                - create-users
                - install-maliciousHttp
                - install-maliciousLdap
                - install-BotnetMaster
              configure:
                - awslogs
                - cfn-hup
              update:
                - cleanup-maliciousHttp
                - update-maliciousHttp
                - cleanup-maliciousLdap
                - update-maliciousLdap
                - cleanup-BotnetMaster
                - update-BotnetMaster
            install-packages:
              packages:
                yum:
                  awslogs: []
                  wireshark: []
                  amazon-ssm-agent: []
                  aws-cfn-bootstrap: []
                  openldap-clients: []
                  nmap-ncat: []
                  jq: []
            create-groups:
              groups:
                mgroup: {}
            create-users:
              users:
                mhttp:
                  groups:
                    - "mgroup"
                  homeDir: "/opt/mhttp"
                mldap:
                  groups:
                    - "mgroup"
                  homeDir: "/opt/mldap"
                bmaster:
                  groups:
                    - "mgroup"
                  homeDir: "/opt/bmaster"
              files:
                "/opt/mhttp/.bashrc":
                  content:
                    Fn::Sub: |
                      export PS1='\u@\h:\w$ '
                      ./AttackerMHttpServer -h
                  mode: "000500"
                  owner: "mhttp"
                  group: "mhttp"
                "/opt/mhttp/.profile":
                  content:
                    Fn::Sub: |
                      if [ -n "$BASH_VERSION" ]; then
                          # include .bashrc if it exists
                          if [ -f "$HOME/.bashrc" ]; then
                              . "$HOME/.bashrc"
                          fi
                      fi
                  mode: "000500"
                  owner: "mhttp"
                  group: "mhttp"
                "/opt/mldap/.bashrc":
                  content:
                    Fn::Sub: |
                      export PS1='\u@\h:\w$ '
                      ./AttackerMLdapServer -h
                  mode: "000500"
                  owner: "mldap"
                  group: "mldap"
                "/opt/mldap/.profile":
                  content:
                    Fn::Sub: |
                      if [ -n "$BASH_VERSION" ]; then
                          # include .bashrc if it exists
                          if [ -f "$HOME/.bashrc" ]; then
                              . "$HOME/.bashrc"
                          fi
                      fi
                  mode: "000500"
                  owner: "mldap"
                  group: "mldap"
                "/opt/bmaster/.bashrc":
                  content:
                    Fn::Sub: |
                      export PS1='\u@\h:\w$ '
                      ./BotnetMasterServer -h
                  mode: "000500"
                  owner: "bmaster"
                  group: "bmaster"
                "/opt/bmaster/.profile":
                  content:
                    Fn::Sub: |
                      if [ -n "$BASH_VERSION" ]; then
                          # include .bashrc if it exists
                          if [ -f "$HOME/.bashrc" ]; then
                              . "$HOME/.bashrc"
                          fi
                      fi
                  mode: "000500"
                  owner: "bmaster"
                  group: "bmaster"
              commands:
                mhttp-set-shell:
                  command: usermod --shell /bin/bash mhttp && chown mhttp:mhttp /opt/mhttp
                mldap-set-shell:
                  command: usermod --shell /bin/bash mldap && chown mldap:mldap /opt/mldap
                bmaster-set-shell:
                  command: usermod --shell /bin/bash bmaster && chown bmaster:bmaster /opt/bmaster
            install-maliciousHttp:
              files:
                /opt/mhttp/mhttp.tar.gz:
                  source:
                    Fn::Join:
                      - ""
                      -
                        - "https://s3.ap-southeast-2.amazonaws.com/"
                        - Ref: log4jShellAttackSFilesS3BucketName
                        - "/log4jShellPoC/mhttp.tar.gz"
                  mode: "000400"
                  owner: "mhttp"
                  group: "mhttp"
                  authentication: log4jShellAttackFilesDownloadCredentials
              commands:
                10-extract-files:
                  command: su - mhttp -c "tar xvfz /opt/mhttp/mhttp.tar.gz"
                20-install-requirements:
                  command: su - mhttp -c "pip3 install -r requirements.txt"
                30-start-mhttp:
                  command: 
                    Fn::Sub: |
                      su - mhttp -c "nohup ./AttackerMHttpServer --BotnetMasterIP ${AttackerBotnetMasterDomainName} --BotnetMasterPort 9001 --HttpServerPort 8080 &> log/AttackerMHttpServer.log &"
            install-maliciousLdap:
              files:
                /opt/mldap/mldap.tar.gz:
                  source:
                    Fn::Join:
                      - ""
                      -
                        - "https://s3.ap-southeast-2.amazonaws.com/"
                        - Ref: log4jShellAttackSFilesS3BucketName
                        - "/log4jShellPoC/mldap.tar.gz"
                  mode: "000400"
                  owner: "mldap"
                  group: "mldap"
                  authentication: log4jShellAttackFilesDownloadCredentials
              commands:
                10-extract-files:
                  command: su - mldap -c "tar xvfz /opt/mldap/mldap.tar.gz"
                20-install-requirements:
                  command: su - mldap -c "pip3 install -r requirements.txt"
                30-start-mldap:
                  command: 
                    Fn::Sub: |
                      su - mldap -c "nohup ./AttackerMLdapServer --MHttpServerIP ${AttackerMLdapDomainName} --MLdapServerPort 1389 &> log/AttackerMLdapServer.log &"
            install-BotnetMaster:
              files:
                /opt/bmaster/bmaster.tar.gz:
                  source:
                    Fn::Join:
                      - ""
                      -
                        - "https://s3.ap-southeast-2.amazonaws.com/"
                        - Ref: log4jShellAttackSFilesS3BucketName
                        - "/log4jShellPoC/bmaster.tar.gz"
                  mode: "000400"
                  owner: "bmaster"
                  group: "bmaster"
                  authentication: log4jShellAttackFilesDownloadCredentials
              commands:
                10-extract-files:
                  command: su - bmaster -c "tar xvfz /opt/bmaster/bmaster.tar.gz"
                20-install-requirements:
                  command: su - bmaster -c "pip3 install -r requirements.txt"
            awslogs:
              files:
                "/etc/awslogs/awslogs.conf":
                  content:
                    Fn::Sub: |
                      [general]
                      state_file = /var/lib/awslogs/agent-state
    
                      [AttackerMHttpServer]
                      file = /opt/mhttp/log/AttackerMHttpServer.log
                      log_stream_name = AttackerMHttpServer
                      log_group_name = ${AttackerEc2InstanceLogs}

                      [AttackerMLdapServer]
                      file = /opt/mldap/log/AttackerMLdapServer.log
                      log_stream_name = AttackerMLdapServer
                      log_group_name = ${AttackerEc2InstanceLogs}
                "/etc/awslogs/awscli.conf":
                  content:
                    Fn::Sub: |
                      [plugins]
                      cwlogs = cwlogs
                      [default]
                      region = ${AWS::Region}
              services:
                sysvinit:
                  awslogsd:
                    enabled: true
                    ensureRunning: true
                    files:
                    - "/etc/awslogs/awslogs.conf"
                    - "/etc/awslogs/awscli.conf"
            cfn-hup:
              files:
                "/etc/cfn/cfn-hup.conf":
                  mode: '000400'
                  owner: root
                  group: root
                  content:
                    Fn::Sub: |
                      [main]
                      stack=${AWS::StackId}
                      region=${AWS::Region}
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                  content:
                    Fn::Sub: |
                      [cfn-auto-reloader-hook]
                      triggers=post.update
                      path=Resources.AttackerEc2Instance.Metadata.AWS::CloudFormation::Init
                      action=/opt/aws/bin/cfn-init -c update -v --stack ${AWS::StackName} --resource AttackerEc2Instance --region ${AWS::Region}
                      runas=root
              services:
                sysvinit:
                  cfn-hup:
                    enabled: true
                    ensureRunning: true
                    files:
                    - "/etc/cfn/cfn-hup.conf"
                    - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
            cleanup-maliciousHttp:
              commands:
                10-stop-mhttp:
                  command: killall -9 -u user mhttp
                20-remove-mhttp-files:
                  command: find /opt/mhttp -depth -user mhttp ! -name '.profile' ! -name '.bashrc' ! -name 'mhttp' ! -name '.bash_history' -exec rm -r "{}" \;
            update-maliciousHttp:
              files:
                /opt/mhttp/mhttp.tar.gz:
                  source:
                    Fn::Join:
                      - ""
                      -
                        - "https://s3.ap-southeast-2.amazonaws.com/"
                        - Ref: log4jShellAttackSFilesS3BucketName
                        - "/log4jShellPoC/mhttp.tar.gz"
                  mode: "000400"
                  owner: "mhttp"
                  group: "mhttp"
                  authentication: log4jShellAttackFilesDownloadCredentials
              commands:
                10-extract-files:
                  command: su - mhttp -c "tar xvfz /opt/mhttp/mhttp.tar.gz"
                20-install-requirements:
                  command: su - mhttp -c "pip3 install -r requirements.txt"
                30-start-mhttp:
                  command: 
                    Fn::Sub: |
                      su - mhttp -c "nohup ./AttackerMHttpServer --BotnetMasterIP ${AttackerBotnetMasterDomainName} --BotnetMasterPort 9001 --HttpServerPort 8080 &> log/AttackerMHttpServer.log &"
            cleanup-maliciousLdap:
              commands:
                10-stop-mhttp:
                  command: killall -9 -u user mldap
                20-remove-mhttp-files:
                  command: find /opt/mldap -depth -user mldap ! -name '.profile' ! -name '.bashrc' ! -name 'mldap' ! -name '.bash_history' -exec rm -r "{}" \;
            update-maliciousLdap:
              files:
                /opt/mldap/log4j-shell-poc-main2.tar.gz:
                  source:
                    Fn::Join:
                      - ""
                      -
                        - "https://s3.ap-southeast-2.amazonaws.com/"
                        - Ref: log4jShellAttackSFilesS3BucketName
                        - "/log4jShellPoC/mldap.tar.gz"
                  mode: "000400"
                  owner: "mldap"
                  group: "mldap"
                  authentication: log4jShellAttackFilesDownloadCredentials
              commands:
                10-extract-files:
                  command: su - mldap -c "tar xvfz /opt/mldap/mldap.tar.gz"
                20-install-requirements:
                  command: su - mldap -c "pip3 install -r requirements.txt"
                30-start-mldap:
                  command: 
                    Fn::Sub: |
                      su - mldap -c "nohup ./AttackerMLdapServer --LdapMServerIP ${AttackerMLdapDomainName} --LdapMServerPort 1389 &> log/AttackerMldapServer.log &"
            cleanup-BotnetMaster:
              commands:
                10-stop-mhttp:
                  command: killall -9 -u user bmaster
                20-remove-mhttp-files:
                  command: find /opt/bmaster -depth -user bmaster ! -name '.profile' ! -name '.bashrc' ! -name 'bmaster' ! -name '.bash_history' -exec rm -r "{}" \;
            update-BotnetMaster:
              files:
                /opt/bmaster/BotnetMasterServer:
                  source:
                    Fn::Join:
                      - ""
                      -
                        - "https://s3.ap-southeast-2.amazonaws.com/"
                        - Ref: log4jShellAttackSFilesS3BucketName
                        - "/log4jShellPoC/BotnetMasterServer"
                  mode: "000400"
                  owner: "bmaster"
                  group: "bmaster"
                  authentication: log4jShellAttackFilesDownloadCredentials

          AWS::CloudFormation::Authentication:
            log4jShellAttackFilesDownloadCredentials: 
              type: S3
              accessKeyId: !Ref log4jShellAttackSFilesUserAccessKeyId
              secretKey: !Ref log4jShellAttackSFilesUserSecretAccessKey
              buckets: !Ref log4jShellAttackSFilesS3BucketName
        CreationPolicy:
          ResourceSignal:
            Timeout: PT5M

    AttackerEc2InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: AttackerEc2InstanceSecurityGroup
        GroupDescription: Enable tcp/1389 Inbound traffic from Attacker LDAP NLB 
                          to Attacker LDAP EC2 Instance. We have to specify
                          the whole public subnet for NLB or we have a custom lambda 
                          function and allow only ip address for NLB.
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1389
          ToPort: 1389
          CidrIp: !Sub '${ElbIPs.PrivateIpA}/32'
        - IpProtocol: tcp
          FromPort: 1389
          ToPort: 1389
          CidrIp: !Sub '${ElbIPs.PrivateIpB}/32'
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Sub '${ElbIPs.PrivateIpA}/32'
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Sub '${ElbIPs.PrivateIpB}/32'
        - IpProtocol: tcp
          FromPort: 9001
          ToPort: 9001
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          # 443 outbound need to be open to allow SSM to connect to the instance.
          # Also is needed for connecting to 443 internet hosts for private instance APi calls.
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          # 80 outbound need to be open to allow the machine to connect to http endpoints.
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        VpcId: !Ref AttackerVPC

    AttackerEc2InstanceLogs:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName:
          Fn::Sub: "/log4jShellPoC/AttackerEc2InstanceLogs/${AWS::StackName}"
        RetentionInDays: 7

###############################################################################
#        
# Load Balancers (Internet Inbound Traffic) Target Groups & Security Groups.
# 
#  Yours:
#    1x YourApiAlb
#    1x YourApiListenerGlbCertificate
#    1x YourApiAlbListener
#    1x YourApiTargetGroup
#    1x YourAppApiAlbSecurityGroup
#    1x YourApiALBCNameRecord
#
#  Attacker:
#    1x AttackerNlb
#    1x AttackerLdapNlbListener
#    1x AttackerLdapTargetGroup
#    1x AttackerLdapNLBCNameRecord
#    1x AttackerHttpNlbListener
#    1x AttackerHttpTargetGroup
#    1x AttackerHttpNLBCNameRecord
#    1x AttackerHttpNlbListener
#    1x AttackerHttpTargetGroup
#    1x AttackerHttpNLBCNameRecord
#    1x AttackerBotnetMasterNlbListener
#    1x AttackerBotnetMasterTargetGroup
#    1x AttackerBotnetMasterNLBCNameRecord
#
###############################################################################

# Yours

    YourApiAlb:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: YourAlb
        Scheme: internet-facing
        Subnets:
         - Ref: YourPublicSubnetA
         - Ref: YourPublicSubnetB
        Type: application
        SecurityGroups:
        - Ref: YourAppApiAlbSecurityGroup
        Tags:
        - Key: Name
          Value: YourAlb

    YourApiListenerGlbCertificate:
      Type: AWS::CertificateManager::Certificate
      Condition: NeedsNewAppApiCertificate
      Properties:
        DomainName: !Ref YourAppApiCertificateDomainName
        ValidationMethod: DNS      
        
    YourApiAlbListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "application/json"
            MessageBody: "{\"message\": \"unauthorized\"}"
            StatusCode: "403"
        LoadBalancerArn: !Ref YourApiAlb
        Port: 443
        Protocol: HTTPS
        Certificates:
        - CertificateArn: !If [NeedsNewAppApiCertificate, !Ref YourApiListenerGlbCertificate, !Ref PreExistingAppApiCertificateArn]

    APIsAlbDefaultListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - TargetGroupArn: !Ref YourApiTargetGroup
          Type: forward
        Conditions:
        - Field: path-pattern
          Values:
            - "/identity/access/token"
        ListenerArn: !Ref YourApiAlbListener
        Priority: 1

    YourApiTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Join ["-", ["AppApi", "TargetGroup"]]
        HealthCheckIntervalSeconds: 30
        UnhealthyThresholdCount: 5
        HealthCheckPath: /identity/healthcheck
        HealthCheckProtocol: HTTP
        HealthCheckPort: 8080
        Matcher:
          HttpCode: '200'
        TargetType: instance
        Port: 8080
        Protocol: HTTP
        Targets:
        - Id:
            Ref: YourEc2Instance
          Port: 8080
        VpcId:
          Ref: YourVPC

    YourAppApiAlbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: YourAppApiAlbSecurityGroup
        GroupDescription: Enable https/443 Inbound traffic from internet and 
                          Outbound to only VPC Cidrs
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref YourVpcCidrA
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref YourVpcCidrB
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref YourVpcCidrA
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref YourVpcCidrB
        VpcId: !Ref YourVPC

    YourAppApiALBCNameRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: !Ref HostedZoneResource
        Comment: DNS CNAME for WebApp ALB.
        Name: !Ref YourAppApiCertificateDomainName
        Type: CNAME
        TTL: '900'
        ResourceRecords:
        - !GetAtt YourApiAlb.DNSName

# Attacker

    AttackerNlb:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: AttackerNlb
        Scheme: internet-facing
        Subnets:
         - Ref: AttackerPublicSubnetA
         - Ref: AttackerPublicSubnetB
        Type: network
        Tags:
        - Key: Name
          Value: AttackerNlb

    AttackerLdapNlbListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: AttackerLdapTargetGroup
        LoadBalancerArn:
          Ref: AttackerNlb
        Port: 1389
        Protocol: TCP
        
    AttackerLdapTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Join ["-", ["AttackerLdap", "TargetGroup"]]
        Port: 1389
        Protocol: TCP
        VpcId:
          Ref: AttackerVPC
        HealthCheckEnabled: True
        HealthCheckIntervalSeconds: 10
        HealthCheckPort: 1389
        HealthCheckProtocol: TCP
        HealthCheckTimeoutSeconds: 10
        HealthyThresholdCount: 3
        UnhealthyThresholdCount: 3
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 60
          - Key: preserve_client_ip.enabled
            Value: false
        TargetType: instance
        Targets:
          - Id: !Ref AttackerEc2Instance
            Port: 1389

    AttackerLdapNLBCNameRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: !Ref HostedZoneResource
        Comment: DNS CNAME for Attacker LDAP NLB.
        Name: !Ref AttackerMLdapDomainName
        Type: CNAME
        TTL: '900'
        ResourceRecords:
        - !GetAtt AttackerNlb.DNSName

    AttackerHttpNlbListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: AttackerHttpTargetGroup
        LoadBalancerArn:
          Ref: AttackerNlb
        Port: 80
        Protocol: TCP
        
    AttackerHttpTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Join ["-", ["AttackerHttp", "TargetGroup"]]
        Port: 8080
        Protocol: TCP
        VpcId:
          Ref: AttackerVPC
        HealthCheckEnabled: True
        HealthCheckIntervalSeconds: 10
        HealthCheckPort: 8080
        HealthCheckProtocol: TCP
        HealthCheckTimeoutSeconds: 10
        HealthyThresholdCount: 3
        UnhealthyThresholdCount: 3
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 60
          - Key: preserve_client_ip.enabled
            Value: false
        TargetType: instance
        Targets:
          - Id: !Ref AttackerEc2Instance
            Port: 8080

    AttackerHttpNLBCNameRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: !Ref HostedZoneResource
        Comment: DNS CNAME for Attacker HTTP NLB.
        Name: !Ref AttackerMHttpDomainName
        Type: CNAME
        TTL: '900'
        ResourceRecords:
        - !GetAtt AttackerNlb.DNSName

    AttackerBotnetMasterNlbListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: AttackerBotnetMasterTargetGroup
        LoadBalancerArn:
          Ref: AttackerNlb
        Port: 9001
        Protocol: TCP
        
    AttackerBotnetMasterTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Join ["-", ["AttackerBotnetMaster", "TargetGroup"]]
        Port: 9001
        Protocol: TCP
        VpcId:
          Ref: AttackerVPC
        HealthCheckEnabled: True
        HealthCheckIntervalSeconds: 10
        HealthCheckPort: 8080
        HealthCheckProtocol: TCP
        HealthCheckTimeoutSeconds: 10
        HealthyThresholdCount: 3
        UnhealthyThresholdCount: 3
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: 60
          - Key: preserve_client_ip.enabled
            Value: true
        TargetType: instance
        Targets:
          - Id: !Ref AttackerEc2Instance
            Port: 9001

    AttackerBotnetMasterNLBCNameRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: !Ref HostedZoneResource
        Comment: DNS CNAME for Attacker HTTP NLB.
        Name: !Ref AttackerBotnetMasterDomainName
        Type: CNAME
        TTL: '900'
        ResourceRecords:
        - !GetAtt AttackerNlb.DNSName

    GetElbIPsFunction:
        Type: 'AWS::Lambda::Function'
        Properties:
            Description: Custom Resource to get ELB IPs (Public & Private)
            Handler: index.lambda_handler
            Runtime: python3.9
            Timeout: 10
            Role: !GetAtt LambdaBasicExecutionRole.Arn
            FunctionName: GetElbIPs
            Code:
                ZipFile: |
                  import json
                  import boto3
                  from botocore.exceptions import ClientError
                  import cfnresponse
                  
                  client = None
                  elbName = ""
                  
                  def lambda_handler(event, context):
                      if(event['ResourceProperties']):
                          elbName = event['ResourceProperties']['ElbArn'].split("net/")[1]
                          client = boto3.client('ec2', endpoint_url="https://ec2." + event['ResourceProperties']['AwsRegion'] + ".amazonaws.com/", region_name=event['ResourceProperties']['AwsRegion'])
                          print(elbName)
                      else:
                          response =  {
                              "PrivateIpA": "",
                              "PublicIpA": "",
                              "PrivateIpB": "",
                              "PublicIpB": ""
                          }
                          cfnresponse.send(event, context, cfnresponse.FAILED, response, "ElbIps")
                      try:
                          response = client.describe_network_interfaces(
                              Filters=[
                                  {
                                      'Name': 'description',
                                      'Values': [
                                          '*' + elbName,
                                      ]
                                  },
                              ]
                          )
                          if(response['NetworkInterfaces']):
                              ElbIPs = {}
                              for networkInterface in response['NetworkInterfaces']:
                                  if(networkInterface['AvailabilityZone'] == event['ResourceProperties']['AwsRegion'] + "a"):
                                      ElbIPs['PrivateIpA'] = networkInterface['PrivateIpAddress']
                                      ElbIPs['PublicIpA'] = networkInterface['PrivateIpAddresses'][0]['Association']['PublicIp']
                                  if(networkInterface['AvailabilityZone'] == event['ResourceProperties']['AwsRegion'] + "b"):
                                      ElbIPs['PrivateIpB'] = networkInterface['PrivateIpAddress']
                                      ElbIPs['PublicIpB'] = networkInterface['PrivateIpAddresses'][0]['Association']['PublicIp']
                              cfnresponse.send(event, context, cfnresponse.SUCCESS, ElbIPs, "ElbIps")
                          else:
                              response = {
                                  "PrivateIpA": "",
                                  "PublicIpA": "",
                                  "PrivateIpB": "",
                                  "PublicIpB": ""
                              }
                              cfnresponse.send(event, context, cfnresponse.FAILED, response, "ElbIps")
                      except ClientError as e:
                          response = {
                              'statusCode': e.response['Error']['Code'],
                              'body': json.dumps(response)
                          }
                          cfnresponse.send(event, context, cfnresponse.FAILED, response, "ElbIps")

    # ElbArn value would be passed on to the lambda function in event['ResourceProperties']['ElbArn']
    # AwsRegion value would be passed on to the lambda function in event['ResourceProperties']['AwsRegion']

    ElbIPs:
        Type: Custom::ElbIPs
        Properties:
            ServiceToken: !GetAtt GetElbIPsFunction.Arn
            ElbArn: !Ref AttackerNlb
            AwsRegion: !Ref "AWS::Region"
  
    LambdaBasicExecutionRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "lambda.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Path: "/"
        Policies: 
          - 
            PolicyName: "LambdaBasicExecutionRole"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - 
                  Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:ap-southeast-2:*:log-group:/aws/lambda/*"
          - 
            PolicyName: "DescribeNetworkInterfaces"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - 
                  Effect: "Allow"
                  Action:
                    - ec2:DescribeNetworkInterfaces
                  Resource: "*"

Outputs: 

    YourVPC: 
      Description: A reference to Your created VPC
      Value: !Ref YourVPC
      Export: 
        Name: log4jShellPoC-VpcId

    YourEnvironmentName: 
      Description: A reference to Your environment name
      Value: !Ref YourEnvironmentName
      Export: 
        Name: log4jShellPoC-YourEnvironmentName

    YourApiAlbDnsName:
      Description: A reference to Your Application LoadBalancer DNS Name
      Value: !GetAtt [ YourApiAlb, DNSName ]
      Export: 
        Name: log4jShellPoC-AppApiAlbDnsName
